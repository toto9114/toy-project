worker_processes auto;
daemon off;

error_log /dev/stderr warn;
pid /tmp/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include /etc/nginx/mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /dev/stdout combined;
  sendfile on;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    #server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    server ${NGINX_GUNICORN_ADDRESS} fail_timeout=0;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 5100;
    client_max_body_size 4G;

    # set the correct host(s) for your site
    #server_name example.com www.example.com;

    keepalive_timeout 65;

    proxy_connect_timeout 65s;
    proxy_send_timeout 65s;
    proxy_read_timeout 65s;
    send_timeout 65s;

    # path for static files
    # root /path/to/app/current/public;

    location = /favicon.ico { access_log off; log_not_found off; }

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    # Json 형식 Error (API에 한해 상세 Error message는 감춤)
    error_page 500 502 503 504 /500.json;
    location /500.json {
        return 500 '{"status":"fail","error":{"code":500,"message":"Internal Server Error"}}';
    }
  }
}
